{"remainingRequest":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lisa/Desktop/study/mongodb+express/my-project/src/components/custom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/src/components/custom.vue","mtime":1587966686946},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBBbGVydCBmcm9tICIuL2FsdGVyIjsKaW1wb3J0IFBhZ2UgZnJvbSAnLi9wYWdlJwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogImN1c3RvbWVycyIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGN1c3RvbWVyOiBbXSwKICAgICAgYWx0ZXI6ICIiLAogICAgICBmbGFnZTogdHJ1ZSwKICAgICAgY2xhc3NzOiAiYWxlcnQgYWxlcnQtd2FybmluZyBhbGVydC1kaXNtaXNzaWJsZSIsCiAgICAgIGZpbHRlcklucHV0OiAiIiwKICAgICAgY2hpbGRyZW5tYWc6ICIiLAogICAgICBwYWdlOjEKICAgIH07CiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBBbGVydCwKICAgIFBhZ2UKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOaOpeaUtuWtkOe7hOS7tueahOWAvAogICAgZ2V0bXNnKG1zZykgewogICAgICB0aGlzLmNoaWxkcmVubWFnID0gbXNnOwogICAgfSwKICAgIC8vIOaOpeaUtuWtkOe7hOS7tueahOS8oOWAvAogICAgZ2V0cGFnZShtc2cpewogICAgICB0aGlzLnBhZ2UgPSBtc2cKICAgICB0aGlzLmZldGNoQ3VzdG9tZXJzKCkKICAgIH0sCiAgICAvLyDngrnlh7vot7PovazliLDor6bmg4UKICAgIGhhbmRsZWNsaWNrKGl0ZW0pIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICIvY3VzdG9tZXIvIiwKICAgICAgICBxdWVyeTogewogICAgICAgICAgaWQ6IGl0ZW0uX2lkCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICAvLyDlvILmraXor7fmsYLmlbDmja4KICAgIGFzeW5jIGZldGNoQ3VzdG9tZXJzKCkgewogICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoIi91c2VycyIsIHsKICAgICAgICBwYWdlOiB0aGlzLnBhZ2UsCiAgICAgICAgcm93czogMgogICAgICB9KTsKICAgICAgdGhpcy5jdXN0b21lciA9IHJlcy5kYXRhLnJvd3M7CiAgICB9LAogICAgLy8g5pCc57SiCiAgICBmaWx0ZXJCeShjdXN0b21lcnMsIGlucHV0dmFsdWUpIHsKICAgICAgLy8gZmlsdGVy5pa55rOV6YGN5Y6G5pW05Liq5pWw57uECiAgICAgIHJldHVybiBjdXN0b21lcnMuZmlsdGVyKGN1c3RvbWVyID0+IHsKICAgICAgICAvLyAgbWF0Y2goKeWwhumBjeWOhueahOaJgOacieaVsOaNruS4juaQnOe0oui+k+WFpeeahOaVsOaNruavlOWvueWQjui/lOWbngogICAgICAgIC8vIOazqOaEj21hdGNo5LiN6IO96YGN6YeM5pWw5a2X77yMdHJ1ZSxmYWxzZQogICAgICAgIHJldHVybiBjdXN0b21lci5uYW1lLm1hdGNoKGlucHV0dmFsdWUpOwogICAgICB9KTsKICAgIH0KICB9LAoKICBjcmVhdGVkKCkgewogICAgLy8gICDliJvlu7rml7bliKTmlq3lrZjlnKhxdWVyeeeahOa4suafkwogICAgaWYgKHRoaXMuJHJvdXRlLnF1ZXJ5LmFsdGVyIHx8IHRoaXMuJHJvdXRlLnF1ZXJ5LmNsYXNzcykgewogICAgICAodGhpcy5hbHRlciA9IHRoaXMuJHJvdXRlLnF1ZXJ5LmFsdGVyKSwKICAgICAgICAodGhpcy5jbGFzc3MgPSB0aGlzLiRyb3V0ZS5xdWVyeS5jbGFzc3MpOwogICAgfQogICAgdGhpcy5mZXRjaEN1c3RvbWVycygpOwogIH0KfTsK"},{"version":3,"sources":["custom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"custom.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"customers container\">\n    <h1 class=\"page-header\">用户管理系统</h1>\n    <!-- v-if判断alter存在情况 -->\n    <Alert v-if=\"alter\" @toparents=\"getmsg\" :message=\"alter\" :classs=\"classs\" v-show=\"flage\"></Alert>\n    <input type=\"text\" class=\"form-control\" placeholder=\"搜索\" v-model=\"filterInput\" />\n\n    <!-- 接收子组件的值 -->\n    <!-- <Alert  @toparents=\"getmsg\" :message=\"alter\" :classs=\"classs\" v-show=\"flage\"></Alert> -->\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>姓名</th>\n          <th>电话</th>\n          <th>邮箱</th>\n          <th></th>\n        </tr>\n      </thead>\n\n      <tbody>\n        <!-- 遍历搜索的东西，触发filterBy方法遍历的时候和搜索框内容进行匹配 例如name-->\n        <!-- 如果不搜索，遍历的就是所有数据 -->\n        <tr v-for=\"(item,index) in filterBy(customer,filterInput)\" :key=\"index\">\n          <td>{{item.name}}</td>\n          <td>{{item.phone}}</td>\n          <td>{{item.email}}</td>\n          <!-- 通过对应的id查看详情  拼接id-->\n          <!-- 在details中通过携带id发送后台请求数据:to是因为to现在的值是变量要绑定，如果是单纯的字符串就不需要绑定-->\n          <td>\n            <!-- <router-link class=\"btn btn-default\" :to=\"'/customer/'+item[index]._id\" style=\"backgroundcolor:blue \">查看详情</router-link> -->\n            <!-- <router-link class=\"btn btn-default\" :to=\"'/customer/'+item._id\" style=\"backgroundcolor:blue \" >查看详情</router-link> -->\n            <div\n              class=\"btn btn-default\"\n              style=\"backgroundcolor:blue\"\n              @click=\"handleclick(item)\"\n            >查看详情</div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n   <Page @page=\"getpage\" class=\"PPage\"></Page>\n  </div>\n</template>\n\n<script>\nimport Alert from \"./alter\";\nimport Page from './page'\nexport default {\n  name: \"customers\",\n  data() {\n    return {\n      customer: [],\n      alter: \"\",\n      flage: true,\n      classs: \"alert alert-warning alert-dismissible\",\n      filterInput: \"\",\n      childrenmag: \"\",\n      page:1\n    };\n  },\n  components: {\n    Alert,\n    Page\n  },\n  methods: {\n    // 接收子组件的值\n    getmsg(msg) {\n      this.childrenmag = msg;\n    },\n    // 接收子组件的传值\n    getpage(msg){\n      this.page = msg\n     this.fetchCustomers()\n    },\n    // 点击跳转到详情\n    handleclick(item) {\n      this.$router.push({\n        path: \"/customer/\",\n        query: {\n          id: item._id\n        }\n      });\n    },\n    // 异步请求数据\n    async fetchCustomers() {\n      const res = await this.$http.post(\"/users\", {\n        page: this.page,\n        rows: 2\n      });\n      this.customer = res.data.rows;\n    },\n    // 搜索\n    filterBy(customers, inputvalue) {\n      // filter方法遍历整个数组\n      return customers.filter(customer => {\n        //  match()将遍历的所有数据与搜索输入的数据比对后返回\n        // 注意match不能遍里数字，true,false\n        return customer.name.match(inputvalue);\n      });\n    }\n  },\n\n  created() {\n    //   创建时判断存在query的渲染\n    if (this.$route.query.alter || this.$route.query.classs) {\n      (this.alter = this.$route.query.alter),\n        (this.classs = this.$route.query.classs);\n    }\n    this.fetchCustomers();\n  }\n};\n</script>\n\n<style>\n</style>"]}]}
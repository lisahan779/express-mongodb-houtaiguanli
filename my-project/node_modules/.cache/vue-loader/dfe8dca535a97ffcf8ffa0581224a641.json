{"remainingRequest":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lisa/Desktop/study/mongodb+express/my-project/src/components/about.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/src/components/about.vue","mtime":1588238583699},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lisa/Desktop/study/mongodb+express/my-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmxpIHsKICBsaXN0LXN0eWxlOiBub25lOwp9Ci5sb2FkLW1vcmUgewogIHRleHQtYWxpZ246IGNlbnRlcjsKfQo="},{"version":3,"sources":["about.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;AACA;AACA;AACA;AACA;AACA","file":"about.vue","sourceRoot":"src/components","sourcesContent":["<!--\n * @Author: your name\n * @Date: 2020-03-07 17:05:46\n * @LastEditTime: 2020-03-18 10:57:31\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /all/my-project/src/components/about.vue\n -->\n<template>\n  <div class=\"about container\">\n    <!-- 方法，需不需要禁用，false，滚动距离里下面多远触发方法 -->\n    <button class=\"btn btn-default\">\n      <router-link to=\"/customers\">返回主页</router-link>\n    </button>\n    <br />\n    <button @click=\"sortGoods\">降序排列</button>\n    <ul>\n      <li v-for=\"(item,index) in this.list\" :key=\"index\">\n        <div>\n          <h3>{{item.productName}}</h3>\n          <img src=\"../assets/img/q.jpg\" alt width=\"100px\" height=\"300px\" />\n          <input type=\"checkbox\" v-model=\"item.checked\" @change=\"_checkAll\" />\n          <span>{{item.produceName}}</span>\n          <button class=\"btn btn-default\" @click=\"editCart('minu',item)\">-</button>\n          <span>{{item.productNum}}</span>\n          <button class=\"btn btn-default\" @click=\"editCart('add',item)\">+</button>\n          <span>价格：{{item.salePrice}}</span>\n          <button @click=\"del(item._id)\" class=\"btn btn-default\">删除</button>\n        </div>\n        <button @click=\"addcart(item._id)\">加入购物车</button>\n      </li>\n    </ul>\n    <div\n      class=\"load-more\"\n      v-infinite-scroll=\"loadMore\"\n      infinite-scroll-disabled=\"busy\"\n      infinite-scroll-distance=\"30\"\n    >{{msg}}</div>\n    <input type=\"checkbox\" id=\"allCheckBox\" v-model=\"allcheck\" @click=\"checkall\" />\n    <button>合计:{{totalMoney}}</button>\n  </div>\n</template>\n\n<script>\n// import { mapGetters } from \"vuex\";\nexport default {\n  name: \"about\",\n  // 调用app.vue组件中的方法\n  inject: [\"reload\"],\n  data() {\n    return {\n      msg: \"加载中。。。\",\n      busy: true,\n      list: [],\n      page: 1,\n      allcheck: false,\n      sortfalg: true,\n      priceChecked: false\n    };\n  },\n  // 总价的实时监听\n  computed: {\n    totalMoney() {\n      let allmoney = 0;\n      let isAllCheck = true;\n      for (let i in this.list) {\n        if (this.list[i].checked) {\n          allmoney += this.list[i].productNum * this.list[i].salePrice;\n        } else {\n          isAllCheck = false;\n        }\n      }\n      this.allcheck == isAllCheck;\n      return allmoney;\n    }\n  },\n  methods: {\n    loadMore() {\n      // 停止加载事件的触发\n      this.busy = true;\n      console.log(\"记载\");\n      //  滚动条会触发多条发送事件，造成服务器压力，使用延时函数等第一条请求结束后发送第二个请求\n      setTimeout(() => {\n        this.page++;\n        // 调用请求后端数据方法由于数据需要累加，故请求时传参，如果已经加载了数据，就进行累加处理。\n        this.getproduct(true);\n      }, 1000);\n    },\n    // 请求后端数据\n    async getproduct(flag) {\n      // 传参\n      let param = {\n        page: this.page,\n        row: 1,\n        sort: 1\n      };\n      const res = await this.$http.get(\"/goodslist\", { params: param });\n      if (flag) {\n        // concat实现数据的叠加\n        this.list = this.list.concat(res.data.result.list);\n        // 如果后端数据条数为0 停止加载事件的触发\n        if (res.data.result.count == 0) {\n          this.busy = true;\n          this.msg = \"数据加载完成\";\n          console.log(\"完成\");\n        } else {\n          this.busy = false;\n        }\n      } else {\n        this.list = res.data.result.list;\n        // 默认falg是false,就不执行前面的if语句，不会触发loadmore()\n        this.busy = false;\n      }\n      localStorage.setItem(\"shoppingcart\", JSON.stringify(this.list));\n      console.log(this.list[0].productImage);\n    },\n    // 数量\n    editCart(flag, item) {\n      if (flag == \"add\") {\n        // 添加商品数量\n        item.productNum++;\n      } else if (flag == \"minu\") {\n        // 减少商品数量\n        if (item.productNum <= 1) {\n          return;\n        }\n        item.productNum--;\n        // console.log(Number(item.productNum) )\n      } else {\n        // 商品控制选中\n        item.checked = item.checked == \"1\" ? \"1\" : \"0\";\n      }\n      this.$http\n        .post(\"/cartEdit\", {\n          productId: item.productId,\n          productNum: item.productNum\n          // checked: item.checked\n        })\n        .then(response => {\n          let res = response.data;\n          console.log(111, res);\n        });\n    },\n    // 全选\n    checkall() {\n      console.log(event.target.checked);\n      this.list.forEach(item => {\n        item.checked = event.target.checked;\n      });\n    },\n    // 反选\n    _checkAll() {\n      //  遍历所有的数据如果都选中则全选选中\n      if (this.list.every(item => item.checked)) {\n        this.allcheck = true;\n      } else {\n        this.allcheck = false;\n      }\n    },\n    // 删除商品\n    async del(id) {\n      const res = await this.$http.delete(\"/cartDel/\" + id);\n      console.log(res);\n      this.reload();\n    },\n    // 价格过滤\n    setpricefilter(index) {\n      this.level = index;\n      this.page = 1;\n      this.getproduct(true);\n    },\n    // 商品降序\n    sortGoods() {\n      this.sortfalg = !this.sortfalg;\n      this.page = 1;\n      this.getproduct(true);\n    },\n    // 加入购物车\n    addcart(id) {\n      this.$http\n        .post(\"/goods/addcart\", {\n          _id: id\n        })\n        .then(res => {\n          if (res.status == 200) {\n            alert(\"加入成功\");\n          } else {\n            alert(\"加入失败\");\n          }\n        });\n    }\n  },\n  mounted() {\n    this.getproduct();\n  }\n};\n</script>\n\n<style>\nli {\n  list-style: none;\n}\n.load-more {\n  text-align: center;\n}\n</style>"]}]}